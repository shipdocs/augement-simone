"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[445],{7155:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Principles/specs-driven-development","title":"Specs-Driven Development","description":"Imagine building a house without a blueprint. The foundation might be wrong, the walls might not align, and the final result would be chaotic and unpredictable. In software, writing code without a clear plan can lead to the same problems.","source":"@site/Principles/specs-driven-development.md","sourceDirName":"Principles","slug":"/Principles/specs-driven-development","permalink":"/claude-simone/Principles/specs-driven-development","draft":false,"unlisted":false,"editUrl":"https://github.com/helmi/claude-simone/tree/main/Principles/specs-driven-development.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Context Engineering","permalink":"/claude-simone/Principles/context-engineering"},"next":{"title":"Legacy System: Installation","permalink":"/claude-simone/legacy-installation"}}');var r=t(4848),o=t(8453);const s={sidebar_position:3},a="Specs-Driven Development",l={},c=[{value:"The Core Workflow in Simone",id:"the-core-workflow-in-simone",level:2},{value:"1. Define the Spec",id:"1-define-the-spec",level:3},{value:"2. AI Implementation",id:"2-ai-implementation",level:3},{value:"3. Review and Refine",id:"3-review-and-refine",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"specs-driven-development",children:"Specs-Driven Development"})}),"\n",(0,r.jsx)(n.p,{children:"Imagine building a house without a blueprint. The foundation might be wrong, the walls might not align, and the final result would be chaotic and unpredictable. In software, writing code without a clear plan can lead to the same problems."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Specs-Driven Development (SDD)"})," is the practice of creating that blueprint before any code is written. It is a methodology where a formal, detailed ",(0,r.jsx)(n.strong,{children:"specification"}),' (or "spec") is the central driver for the entire development lifecycle. This spec acts as the single source of truth for both the human developer and, crucially, the AI partner.']}),"\n",(0,r.jsxs)(n.admonition,{title:"What Problem Does SDD Solve for AI?",type:"note",children:[(0,r.jsx)(n.p,{children:"Large Language Models are incredibly powerful, but they lack human intuition and deep business context. If you give an AI a vague request, you'll get a vague or incorrect result."}),(0,r.jsxs)(n.p,{children:["Specs-Driven Development bridges this gap. By providing the AI with a clear, structured, and unambiguous spec, you transform it from an unpredictable generator into a reliable engineering partner. The developer's role evolves from a ",(0,r.jsx)(n.strong,{children:"coder"})," to an ",(0,r.jsx)(n.strong,{children:"architect"}),"\u2014designing the blueprint that the AI can then execute with precision."]})]}),"\n",(0,r.jsx)(n.h2,{id:"the-core-workflow-in-simone",children:"The Core Workflow in Simone"}),"\n",(0,r.jsx)(n.p,{children:"In the Simone ecosystem, Specs-Driven Development follows a clear, three-step process that emphasizes planning and precision."}),"\n",(0,r.jsx)(n.h3,{id:"1-define-the-spec",children:"1. Define the Spec"}),"\n",(0,r.jsx)(n.p,{children:"The developer's first and most important job is to analyze a problem and create a detailed task specification. This isn't a quick note; it's a formal piece of documentation that leaves no room for ambiguity."}),"\n",(0,r.jsx)(n.p,{children:"A good spec should include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"A Clear Goal:"})," What is the user story or objective?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Acceptance Criteria:"})," How do we know when the task is done and correct?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Constraints & Edge Cases:"})," What are the boundaries and potential pitfalls?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implementation Notes:"})," Are there specific patterns, libraries, or functions that must be used?"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-ai-implementation",children:"2. AI Implementation"}),"\n",(0,r.jsxs)(n.p,{children:["With a clear spec in hand, the developer delegates the implementation to the AI using a simple command, like ",(0,r.jsx)(n.code,{children:"/do_task"}),". Simone loads the spec as the primary context, allowing the AI to focus entirely on translating the well-defined requirements into code."]}),"\n",(0,r.jsx)(n.h3,{id:"3-review-and-refine",children:"3. Review and Refine"}),"\n",(0,r.jsxs)(n.p,{children:["The developer reviews the AI-generated code against the spec. If the output is incorrect or incomplete, the first instinct shouldn't be to fix the code directly. Instead, the developer should ask: ",(0,r.jsx)(n.strong,{children:'"Is the spec clear enough?"'})]}),"\n",(0,r.jsx)(n.p,{children:"By refining the spec and having the AI regenerate the code, the spec remains the true source of truth, ensuring that the documentation and implementation never drift apart."}),"\n",(0,r.jsx)(n.admonition,{title:"The Benefits of a Spec-First Approach",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Predictable AI:"})," Dramatically improves the reliability and consistency of the AI's output."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enhanced Developer Focus:"})," Frees developers from tedious coding to focus on higher-level architecture and problem-solving."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Living Documentation:"})," Your spec library becomes a rich, detailed, and always up-to-date history of your project's functionality."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Superior Testability:"})," Clear acceptance criteria in a spec are the perfect foundation for writing robust unit and integration tests."]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);