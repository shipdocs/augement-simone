"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[926],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},9637:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"legacy-installation","title":"Legacy System: Installation","description":"The legacy Simone system is the current, stable version and is the recommended way to start managing your project with AI.","source":"@site/legacy-installation.md","sourceDirName":".","slug":"/legacy-installation","permalink":"/claude-simone/legacy-installation","draft":false,"unlisted":false,"editUrl":"https://github.com/helmi/claude-simone/tree/main/legacy-installation.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Specs-Driven Development","permalink":"/claude-simone/Principles/specs-driven-development"},"next":{"title":"MCP Server: Installation","permalink":"/claude-simone/mcp-installation"}}');var s=t(4848),r=t(8453);const o={sidebar_position:1},a="Legacy System: Installation",l={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Initializing Your Project",id:"initializing-your-project",level:2},{value:"Next Steps: Defining Your Project Work",id:"next-steps-defining-your-project-work",level:2},{value:"1. Plan a Milestone",id:"1-plan-a-milestone",level:3},{value:"2. Break Down into Sprints",id:"2-break-down-into-sprints",level:3},{value:"3. Create Tasks for the Current Sprint",id:"3-create-tasks-for-the-current-sprint",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"legacy-system-installation",children:"Legacy System: Installation"})}),"\n",(0,s.jsx)(n.p,{children:"The legacy Simone system is the current, stable version and is the recommended way to start managing your project with AI."}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsxs)(n.p,{children:["For the fastest setup, you can use the ",(0,s.jsx)(n.code,{children:"hello-simone"})," installer. This command will create the necessary ",(0,s.jsx)(n.code,{children:".simone"})," and ",(0,s.jsx)(n.code,{children:".claude"})," directories in your project and populate them with the required templates and commands."]}),"\n",(0,s.jsx)(n.p,{children:"From the root of your project, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx hello-simone\n"})}),"\n",(0,s.jsx)(n.p,{children:"This command can also be used to safely update an existing Simone installation; your existing command files will be backed up automatically."}),"\n",(0,s.jsx)(n.h2,{id:"initializing-your-project",children:"Initializing Your Project"}),"\n",(0,s.jsx)(n.p,{children:"Once the files are in place, you need to initialize the project. This allows Simone to analyze your codebase and create the initial set of project documents."}),"\n",(0,s.jsx)(n.p,{children:"In your AI chat interface (e.g., Claude Code), run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/simone:initialize\n"})}),"\n",(0,s.jsx)(n.p,{children:"The AI will guide you through a conversational setup process. It can work with new or existing codebases and can help you create project documentation (like architecture overviews) or import documents you already have."}),"\n",(0,s.jsx)(n.h2,{id:"next-steps-defining-your-project-work",children:"Next Steps: Defining Your Project Work"}),"\n",(0,s.jsx)(n.p,{children:"After initialization, your next step is to define the work to be done within Simone. This typically follows a structured planning process:"}),"\n",(0,s.jsx)(n.h3,{id:"1-plan-a-milestone",children:"1. Plan a Milestone"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action:"})," Manually create a new milestone directory and documents in ",(0,s.jsx)(n.code,{children:".simone/02_REQUIREMENTS/"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," To define the high-level goals and requirements for a major feature or project phase. This sets the overall direction for the work to come."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-break-down-into-sprints",children:"2. Break Down into Sprints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.code,{children:"/simone:create_sprints_from_milestone"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," To analyze a milestone's requirements and break them down into smaller, logical sprints."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-create-tasks-for-the-current-sprint",children:"3. Create Tasks for the Current Sprint"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.code,{children:"/simone:create_sprint_tasks"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," To generate detailed, actionable tasks for your ",(0,s.jsx)(n.em,{children:"current"})," sprint. This is done one sprint at a time to ensure tasks are based on the most recent state of the codebase."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Once tasks are created, you are ready to begin development with the ",(0,s.jsx)(n.code,{children:"/simone:do_task"})," command."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);