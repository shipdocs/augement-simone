"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[287],{5985:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/claude-simone/introduction","docId":"introduction","unlisted":false},{"type":"category","label":"Principles","items":[{"type":"link","label":"Context Engineering","href":"/claude-simone/Principles/context-engineering","docId":"Principles/context-engineering","unlisted":false},{"type":"link","label":"Specs-Driven Development","href":"/claude-simone/Principles/specs-driven-development","docId":"Principles/specs-driven-development","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Legacy System: Installation","href":"/claude-simone/legacy-installation","docId":"legacy-installation","unlisted":false},{"type":"link","label":"MCP Server: Installation","href":"/claude-simone/mcp-installation","docId":"mcp-installation","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Legacy System","items":[{"type":"link","label":"Legacy System Overview","href":"/claude-simone/legacy-overview","docId":"legacy-overview","unlisted":false},{"type":"link","label":"Legacy System Architecture","href":"/claude-simone/legacy-architecture","docId":"legacy-architecture","unlisted":false},{"type":"link","label":"Legacy System Workflow","href":"/claude-simone/legacy-workflow","docId":"legacy-workflow","unlisted":false},{"type":"category","label":"Command Reference","items":[{"type":"link","label":"do_task","href":"/claude-simone/do_task","docId":"do_task","unlisted":false},{"type":"link","label":"initialize","href":"/claude-simone/initialize","docId":"initialize","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"MCP Server","items":[{"type":"link","label":"Overview","href":"/claude-simone/mcp-overview","docId":"mcp-overview","unlisted":false},{"type":"link","label":"Architecture","href":"/claude-simone/mcp-architecture","docId":"mcp-architecture","unlisted":false},{"type":"link","label":"Recommended Workflow","href":"/claude-simone/mcp-workflow","docId":"mcp-workflow","unlisted":false},{"type":"link","label":"Prompt Reference","href":"/claude-simone/prompt-reference","docId":"prompt-reference","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"do_task":{"id":"do_task","title":"do_task","description":"The do_task command is the primary command for executing development work. It instructs the AI to pick up a specific task and implement it.","sidebar":"docsSidebar"},"initialize":{"id":"initialize","title":"initialize","description":"The initialize command sets up the Simone framework in a new or existing project.","sidebar":"docsSidebar"},"introduction":{"id":"introduction","title":"Welcome to Simone Documentation","description":"Simone is a specialized framework designed to empower AI agents, particularly those like Claude Code, to operate effectively within complex software engineering projects. It offers a suite of features that enable a context-aware environment, ensuring the AI always has the precise information needed to perform its tasks.","sidebar":"docsSidebar"},"legacy-architecture":{"id":"legacy-architecture","title":"Legacy System Architecture","description":"This document will describe the architecture of the legacy Simone system.","sidebar":"docsSidebar"},"legacy-installation":{"id":"legacy-installation","title":"Legacy System: Installation","description":"The legacy Simone system is the current, stable version and is the recommended way to start managing your project with AI.","sidebar":"docsSidebar"},"legacy-overview":{"id":"legacy-overview","title":"Legacy System Overview","description":"This document will describe the overview of the legacy Simone system.","sidebar":"docsSidebar"},"legacy-workflow":{"id":"legacy-workflow","title":"Legacy System Workflow","description":"This document will describe the workflow of the legacy Simone system.","sidebar":"docsSidebar"},"mcp-architecture":{"id":"mcp-architecture","title":"Architecture","description":"The MCP Server is designed with a modular and extensible architecture, built on modern TypeScript and Node.js principles. It is intended to run as a persistent background process that serves context to a connected AI client.","sidebar":"docsSidebar"},"mcp-installation":{"id":"mcp-installation","title":"MCP Server: Installation","description":"Note: The MCP Server is currently in active development and is not yet recommended for production use. The installation process and usage patterns are subject to change.","sidebar":"docsSidebar"},"mcp-overview":{"id":"mcp-overview","title":"Overview","description":"The MCP (Model Context Protocol) Server is the next-generation implementation of the Simone framework. It replaces the file-based command system of the legacy version with a robust, standardized server architecture.","sidebar":"docsSidebar"},"mcp-workflow":{"id":"mcp-workflow","title":"Recommended Workflow","description":"The workflow for the MCP Server is more direct and tool-oriented than the legacy system. Instead of using high-level commands that guide the AI through a long process, the MCP server exposes a set of focused prompts and tools that the AI can use as needed.","sidebar":"docsSidebar"},"Principles/context-engineering":{"id":"Principles/context-engineering","title":"Context Engineering","description":"Large language models have a fundamental limitation: a finite context window. Meanwhile, modern software projects are vast, complex, and spread across thousands of files. You can\'t simply paste an entire codebase into a prompt and expect a good result. So, how do you provide an AI with the right information to perform a meaningful engineering task?","sidebar":"docsSidebar"},"Principles/specs-driven-development":{"id":"Principles/specs-driven-development","title":"Specs-Driven Development","description":"Imagine building a house without a blueprint. The foundation might be wrong, the walls might not align, and the final result would be chaotic and unpredictable. In software, writing code without a clear plan can lead to the same problems.","sidebar":"docsSidebar"},"prompt-reference":{"id":"prompt-reference","title":"Prompt Reference","description":"The MCP Server provides a set of built-in prompts that can be used to perform common development tasks. These prompts are defined in YAML and use Handlebars for templating, making them highly configurable.","sidebar":"docsSidebar"},"README":{"id":"README","title":"Website","description":"This website is built using Docusaurus, a modern static website generator."},"src/pages/markdown-page":{"id":"src/pages/markdown-page","title":"Markdown Page","description":"This is a markdown page."}}}}')}}]);