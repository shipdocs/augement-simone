"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[437],{8180:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"mcp-architecture","title":"Architecture","description":"The MCP Server is designed with a modular and extensible architecture, built on modern TypeScript and Node.js principles. It is intended to run as a persistent background process that serves context to a connected AI client.","source":"@site/mcp-architecture.md","sourceDirName":".","slug":"/mcp-architecture","permalink":"/claude-simone/mcp-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/helmi/claude-simone/tree/main/mcp-architecture.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Overview","permalink":"/claude-simone/mcp-overview"},"next":{"title":"Recommended Workflow","permalink":"/claude-simone/mcp-workflow"}}');var i=t(4848),o=t(8453);const s={sidebar_position:2},c="Architecture",a={},l=[{value:"System Diagram: Component Interaction",id:"system-diagram-component-interaction",level:2},{value:"Architectural Components",id:"architectural-components",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,i.jsx)(n.p,{children:"The MCP Server is designed with a modular and extensible architecture, built on modern TypeScript and Node.js principles. It is intended to run as a persistent background process that serves context to a connected AI client."}),"\n",(0,i.jsx)(n.h2,{id:"system-diagram-component-interaction",children:"System Diagram: Component Interaction"}),"\n",(0,i.jsx)(n.p,{children:"This diagram shows the high-level architecture of the MCP Server and its interaction with the AI client and the project."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    subgraph AI Client\n        A[AI Development Tool] <--\x3e|MCP over Stdio| B(Simone MCP Server)\n    end\n\n    subgraph Project\n        C[/.simone/project.yaml]\n        D[/.simone/prompts/]\n        E[/.simone/simone.db]\n        F[Project Source Code]\n    end\n\n    subgraph Server Internals\n        G[Prompt Handler]\n        H[Tool Registry]\n        I[Config Loader]\n        J[Activity Logger]\n    end\n\n    B --\x3e I\n    I --\x3e C\n\n    B --\x3e G\n    G --\x3e D\n\n    B --\x3e H\n    H --\x3e J\n    J --\x3e E\n\n    A --\x3e|Performs Work| F\n\n    style A fill:#ccf,stroke:#333,stroke-width:2px\n    style B fill:#cfc,stroke:#333,stroke-width:2px\n    style F fill:#f9f,stroke:#333,stroke-width:2px\n"})}),"\n",(0,i.jsx)(n.h3,{id:"architectural-components",children:"Architectural Components"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Server Core:"})," The main entry point of the application (",(0,i.jsx)(n.code,{children:"index.ts"}),"). It initializes the MCP server from the ",(0,i.jsx)(n.code,{children:"@modelcontextprotocol/sdk"}),", sets up request handlers, and connects to the transport layer (currently Stdio)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Config Loader:"})," Responsible for loading and validating the project's configuration from ",(0,i.jsx)(n.code,{children:".simone/project.yaml"}),". It provides a structured way to access project metadata, context paths, and tooling information."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Prompt Handler:"})," Manages the loading, caching, and rendering of prompts. It uses Handlebars for templating, allowing for dynamic prompts that can react to the project's configuration. It supports both built-in and project-specific prompts."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tool Registry:"})," A central registry for all available MCP tools. The primary tool currently implemented is the ",(0,i.jsx)(n.code,{children:"ActivityLogger"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Activity Logger:"})," A key service that provides the ",(0,i.jsx)(n.code,{children:"log_activity"})," tool. It interacts with an SQLite database (",(0,i.jsx)(n.code,{children:".simone/simone.db"}),") to provide a persistent log of all development activities."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Transport Layer:"})," Communication with the AI client is handled via a transport layer. The default implementation uses ",(0,i.jsx)(n.code,{children:"StdioServerTransport"}),", meaning the server communicates over standard input and output, which is a common pattern for development tools."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);